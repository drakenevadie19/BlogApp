// import express from 'express';

// const app = express();
// //MIDDLEware
// //Tell express server: when it receives a request that has a JSON body/payload, 
// // it is going to parse and automatically make that available to us on req.body
// app.use(express.json())

// app.get('/hello/:name', (req, res) => {
//     //params give us URL params here => name is a URL param here
//     // our URL can have more than 1 URL param
//     const {name} = req.params;
//     res.send(`Hello ${name}!!!`);
// })

// app.post('/hello', (req, res) => {
//     console.log(req.body)
//     res.send(`Hello ${req.body.name}!`);
// })

// app.listen(8000, () => {
//     console.log("Server is listening on port 8000")
// })

//What we want to do here is that users can upvote our articles to help our articles is the most popular/helpful

//temporaty fake db, which contain fake upvote 
// Later, we will replace this with MongoDB
// let articlesInfo = [
//     {
//         name: 'learn-react',
//         upvotes: 0,
//         comments: [],
//     },{
//         name: 'learn-node',
//         upvotes: 0,
//         comments: [],
//     },{
//         name: 'mongodb',
//         upvotes: 0,
//         comments: [],
//     },
// ]
// Since we could connect the mongoDB, we can remove this.

//name here is the name of the article we want to upvote
// app.put('/api/articles/:name/upvote', (req, res) => {
//     //logic for upvote article
//     // we need to define fake db, which contain how many upvote each articles has? 
//     // Later, we will replace this with MongoDB

//     // Based on the value of URL param, we need to know what article we need to upvote, 
//     //  and then we will increse value of upvotes of that article's object on our DB
//     const { name } = req.params;

//     //find the corresponding article with that name
//     const article = articlesInfo.find(article => article.name === name);
//     //make sure that article exists
//     if (article) {
//         article.upvotes += 1;
//         //Announce for us how many upvote that article currently have
//         res.send(`The ${name} article now has ${article.upvotes} upvotes!!`);
//     } else {
//         //In case that article does not exist, we need to annouce to user that this article does not exist
//         res.send(`The ${name} article does not exists`);
//     }
// })

//after this, we can use nodemon package, which can fix our problem: we have to restart our server everytime we make changes
// installed it by npm install nodemon --save-dev
// we add the --save-dev flag to the command, which will install this as a dev dependency, which basically means that it will be put 
//  in separate part of our package.JSON along with the dev dependencies instead of actual production dependencies
// After installing, we can run our server by using npx nodemon
//   => it will continuously run our server and EVERYTIME WE MAKE CHANGES TO SERVER.JS file, it will automatically refresh and restart our server

//Since the command npx nodemon src/server.js is kinda long, we can make a shortcut to this command: 
// In package.json file, in "script" category, we add one more line: "dev": "npx nodemon src/server.js",
//  => This line will create a short cut to this commmand
//  => From now, we only need to run the command: npm run dev
//Futhermore, we don't really need "npx" when it is in a package.JSON script, so we will make change: 
//          "dev": "nodemon src/server.js"

//Let's adding function to allow users to add comments to our article 
// inside the endpoint that we create for our adding comments, we basically just going to take any information that we get from our user, such as 
//  comment text and create a new object that we will insert into this comments array
//This adding comment endpoint should be POST, because we are adding new comment to the comments 
//This comment is to add a new comment to ${name} article
// app.post('/api/articles/:name/comments', (req, res) => {
//     //We have to decide what format the comments are going to be specified when they are sent to the server as a request
//     // We want the client side (FE) to specify both of the Text of the new comment that they are adding and the Name of the commentor
//     // => POST query's body will has 2 properties: 
//     //      1. "postedBy": name of commentor
//     //      2. "text": comment
//     const {name} = req.params;
//     const {postedBy, text} = req.body;
    
//     //Since we have the properties from the request body, we will insert those into the comments array for the corresponding articles
//     const article = articlesInfo.find(article => article.name === name);
//     if (article) {
//         article.comments.push( {postedBy, text});
//         //we need to send back a response after adding a new comment to this article
//         // we will send the entire array of comments for that article, so that we can see whether they are successfully getting added or not?
//         res.send(article.comments);
//     } else {
//         res.send(`The ${name} article does not exists!!`);
//     }
//     //when our server is restarted, all of our data (comments) will be reseted, since old data is only stored in fake in-memory database (comments array)
// })

use key in credential.json in server.js to connect Server to Firebase Auth, but the server have higher permissions
we need to install essential firebase package, name: firebase admin
int BE directory: npm install firebase-admin
Import firebase private key from credential.json file

then load the credentials.json package
const credentials = JSON.parse(
    fs.readFileSync()
)
Then, we will use this to initialize this firebase admin package on our server, and connect it to our firebase project 
this function will take a configuration object as parameter

We need to protect our endpoints => user can not upvote without logging in 
=> for each endpoint, checking whether the user making the request was logged in or not? 

We will use authToken in axios request, which is how FE proves that the user is logged in 
=> we use AuthToken in every request coming from our front end 

This is express middleware
app.use((req, res, next) => {
    
})
next is a callback function, which will be called when we done with processing things in the middleware 
and we will go to endppoint below

fb=firebase

GET endpoint: 
- This endpoint does not take much protection because all clients should be able to access this data regardless whether they logged in or not 
- However, we will include some of data to indicate whether user can upvote that article 
=> We will then use this information to manage how many time an user can upvote, and if exceed allowed times, they can not upvote anymore
=> We will get the ID of the user's information that we loaded before 

PUT and POST endpoints: 
- If the user is not already logged in, we dont want user to be able to make requests to either of these endpoint 
- For the comment endpoint (POST): 
    - Make sure that postedBy = user's email => instead of using postedBy, we will use user's email directly 
        const {email} = req.user;
    
    //make a query to DB for adding a new comment with postedBy and text for comments
    await db.collection('articles').updateOne({ name }, {
        $push: { comments: { postedBy: email, text } },
    });

Then we will add authToken too 


import express from 'express';
import { db, connectToDB } from './db.js';

import fs from 'fs';
import admin from 'firebase-admin';

import 'dotenv/config';

import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const credentials = JSON.parse(
    fs.readFileSync('./credentials.json')
)

admin.initializeApp({
    credential: admin.credential.cert(credentials),
}) // => telling the firebase admin package what credentials to use in order to connect to our project


const app = express();
app.use(express.json());

app.use(express.static(path.join(__dirname, '../build')));

app.get(/^(?!\/api).+/, (req,res) => {
    res.sendFile(path.join(__dirname, '../build/index.html'));
});

// Use Express Middleware to automatically load the user's info when we receive a request 
app.use(async (req, res, next) => {
    //get authtoken
    const { authtoken } = req.headers;

    //use fb auth to tkae that token to load the fb user for that token
    // => if user did not log in, we are not going to include the authtoken along with the request, and load the basic article info
    if (authtoken) {
        try {
            req.user = await admin.auth().verifyIdToken(authtoken); // Verify whether authToken is valid and load the coresponding user that making request for that authtoken 
        } catch (e) {
            return res.sendStatus(400);
        }
    }

    req.user = req.user || {};
    
    next();
})
// Then we will go though every endpoint and checking whether who is making the request 


// GET endpoint: for user to load the information -> Can see the upvotes, comments
app.get('/api/articles/:name', async (req, res) => {
    //Call backfunction => get the current value of this-name-URL-parameter 
    //  => use it to query MongoDB => get the infomation for that article
    const { name } = req.params;

    const { uid } = req.user;
     
    const article = await db.collection('articles').findOne( { name });

    if (article) {
        // Checking whether user with id = uid have upvoted before 
        // Create an array containing all of users that upvoted in the past 
        const upvoteIds = article.upvoteIds || []; //In case this property did not exists in this article, we will add an empty array for it
        // => We will check whether user with uid existed in upvoteIds array or not
        // send back this properties along with the article, to make sure that an user can not upvote more than once in a time 
        article.canUpvote = uid && !upvoteIds.includes(uid);

        res.json(article);
    } else {
        res.sendStatus(404);
    };
    
})

//
app.use((req, res, next) => {
    // if the use exist and include authToken with their request
    if (req.user) {
        next();
    } else {
        res.sendStatus(401); // 401 = user is not allowed to make the request 
    }
});

app.put('/api/articles/:name/upvote', async (req, res) => {
    //logic for upvote article
    // we need to define fake db, which contain how many upvote each articles has? 
    // Later, we will replace this with MongoDB

    // Based on the value of URL param, we need to know what article we need to upvote, 
    //  and then we will increse value of upvotes of that article's object on our DB
    const { name } = req.params;
    const { uid } = req.user;

    const article = await db.collection('articles').findOne( { name });

    if (article) {
        // Checking whether user with id = uid have upvoted before 
        // Create an array containing all of users that upvoted in the past 
        const upvoteIds = article.upvoteIds || []; //In case this property did not exists in this article, we will add an empty array for it
        // => We will check whether user with uid existed in upvoteIds array or not
        // send back this properties along with the article, to make sure that an user can not upvote more than once in a time 
        const canUpvote = uid && !upvoteIds.includes(uid);
        
        // if user can upvote, we can make changes to our database 
        if (canUpvote) {
            await db.collection('articles').updateOne({ name }, {
                $inc: { upvotes: 1 },
                $push: { upvoteIds: uid} // push requester's uid to the upvoteIds array, which mean next time checking, this user can not upvote 
            })
        }

        const updatedArticle = await db.collection('articles').findOne( { name }); 
        //Announce for us how many upvote that article currently have
        res.json(updatedArticle);
    } else {
        //In case that article does not exist, we need to annouce to user that this article does not exist
        res.send(`The ${name} article does not exists`);
    }
})

// PUT endpoint for comments
app.post('/api/articles/:name/comments', async (req, res) => {
    const {name} = req.params;
    const {text} = req.body;
    const {email} = req.user;
    
    //make a query to DB for adding a new comment with postedBy and text for comments
    await db.collection('articles').updateOne({ name }, {
        $push: { comments: { postedBy: email, text } },
    });

    const article = await db.collection('articles').findOne({ name })

    if (article) {
        res.json(article);
    } else {
        res.send(`The ${name} article does not exists!!`);
    }
    //when our server is restarted, all of our data (comments) will be reseted, since old data is only stored in fake in-memory database (comments array)
});

const PORT = process.env.PORT || 8000; // specify port listening to 

connectToDB(() => {
    console.log("Successfully connected to DB");
    app.listen(PORT, () => {
        console.log("Server is listening on port " + PORT);
    })
})


